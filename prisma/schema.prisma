// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//nextAuth

model Account {
  id                    String  @id @default(cuid())
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refreshTokenExpiresIn String?
  refresh_token         String?
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String
  bio           String?
  about         String?
  location      String?
  link          String?
  createdAt     DateTime  @default(now())

  posts     Post[]
  accounts  Account[]
  sessions  Session[]
  Vote      Vote[]
  postViews PostView[]
  save      Save[]
}

//Application

model Post {
  id        String   @id @default(cuid())
  title     String?
  content   String
  parentId  String?
  code      String?
  vueXTime  Int      @default(0)
  userId    String
  createdAt DateTime @default(now())
  voteCount Int      @default(0)

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes    Vote[]
  replies  Post[]     @relation("comments")
  parent   Post?      @relation("comments", fields: [parentId], references: [id], onDelete: Cascade)
  PostView PostView[]
  save     Save[]
}

model Save {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PostView {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
  Post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  type      String
  createdAt DateTime @default(now())

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  Post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
}
